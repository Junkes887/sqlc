// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: itens.sql

package database

import (
	"context"
)

const createIten = `-- name: CreateIten :exec
INSERT INTO itens (id, name, user_id) VALUES(?,?,?)
`

type CreateItenParams struct {
	ID     int32
	Name   string
	UserID int32
}

func (q *Queries) CreateIten(ctx context.Context, arg CreateItenParams) error {
	_, err := q.db.ExecContext(ctx, createIten, arg.ID, arg.Name, arg.UserID)
	return err
}

const getIten = `-- name: GetIten :one
SELECT id, name, user_id FROM itens WHERE id = ?
`

func (q *Queries) GetIten(ctx context.Context, id int32) (Iten, error) {
	row := q.db.QueryRowContext(ctx, getIten, id)
	var i Iten
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getItens = `-- name: GetItens :many
SELECT id, name, user_id FROM itens
`

func (q *Queries) GetItens(ctx context.Context) ([]Iten, error) {
	rows, err := q.db.QueryContext(ctx, getItens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Iten
	for rows.Next() {
		var i Iten
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
